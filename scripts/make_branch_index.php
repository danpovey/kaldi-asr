<?php
// Called from ./make_branch_recursive.sh
// Usage: php make_branch_index.php <root-dir> <branch-name> <relative-path> <list-of-build-indexes> 
//    e.g.: php make_branch_index.php /mnt/kaldi-asr-data trunk egs/wsj 1 2 5 7
  date_default_timezone_set('US/Eastern');
  $date = date('D, d M Y H:i:s');
  print "<!-- Generated by $argv[0] at $date -->\n";
?>
<!DOCTYPE html>
<html>
  <head>
    <meta name="description" content="Kaldi ASR"/>
    <meta charset="UTF-8">
    <link rel="icon" type="image/png" href="/kaldi_ico.png"/>
    <link rel="stylesheet" type="text/css" href="/indexes.css"/> 
    <title>Kaldi ASR</title>

<?php
if (count($argv) < 5) {
   // note: first argument is make_branch_index.php, we need at least 4 real arguments
   syslog(LOG_ERR, "make_branch_index.php called with too few arguments: " .
         implode(" ", $argv));
  exit(1);
}
$root = $argv[1];
$branch = $argv[2];
$relative_path = $argv[3];  // Caution: this may be the empty string.

$slash_relative_path = ($relative_path != '' ? "/$relative_path" : '');


$input_dirs = array();  // we'll index this as numeric build-number -> input-dir,
                        // and sort numerically by build number.
$max_b = 0;
for ($n = 4; $n < count($argv); $n++) {
  $b = $argv[$n];
  if (preg_match("#^\d+$#", $b ) != 1) {
    syslog(LOG_ERR, "make_branch_index.php: $b does not look like an index number");
    exit(1);
  }
  $input_dir = "$root/build/$b/$branch/$slash_relative_path";
  if (isset($input_dirs[$b])) {
    syslog(LOG_ERR, "make_branch_index.php: multiple instances of build $b on command line");
    exit(1);
  }
  $input_dirs[$b] = $input_dir;
  if ($b > $max_b) { $max_b = $b; }
}
// Sort the input_dirs array from smallest to largest build index, 
// numerically.
ksort($input_dirs, SORT_NUMERIC);

function human_readable_size($bytes) {
  $sz = ' KMGTP'; // for bytes, just print out the number.
  $factor = floor((strlen($bytes) - 1) / 3);
  $n = $bytes / pow(1024, $factor);
  $decimals = ($n < 10.0 && $factor != 0 ? 1 : 0);
  return sprintf("%.{$decimals}f", $n) . @$sz[$factor];
}

// we'll index the associative array "all_metadata" as
// <build-index>.<variable-name>, e.g. "6.revision" = 1421
$all_metadata = array();  

foreach ($input_dirs as $b => $input_dir) {
  $metadata = "$root/submitted/$b/metadata";
  $metadata_array = file($metadata); // returns file as array, or false on error.
  if ($metadata_array == false || count($metadata_array) < 3) {
    syslog(LOG_ERR, "make_branch_index.php: file $metadata is too small or couldn't be opened.");
    exit(1);
  }
  foreach ($metadata_array as $line) {
    if (preg_match('/^([a-zA-Z0-9_]+)=(.+)/', $line, $matches) != 1 || count($matches) != 3) {
      # we'll allow empty lines in metadata file.
      if (preg_match('/^\s*$/', $line) != 1) {
        syslog(LOG_ERR, "make_branch_index.php: bad line in file $metadata: $line");
        exit(1);
      }
    }
    $var_name = $matches[1];
    $var_value = $matches[2];
    $all_metadata["$b.$var_name"] = $var_value;
  }
  foreach (array('branch', 'name', 'root', 'revision', 'time', 'note') as $var_name) {
    if (!isset($all_metadata["$b.$var_name"])) {
      syslog(LOG_ERR, "make_branch_index.php: variable $var_name not set in metadata file $metadata");
      exit(1);
    }
  }
  // Format the time of creation as a date like 30 Mar 2014
  $date = date('d M Y', $all_metadata["$b.time"]);
  $all_metadata["$b.date"] = $date;

  $index_dir = "$root/build_index/$b/$branch$slash_relative_path";
  $all_metadata["$b.index_dir"] = $index_dir;

  // also work out the URL for each of the versions of this directory.  Note, this
  // is located in /downloads/build, not /downloads/build_index; we map it in the 
  // apache config.
  $index_url = "/downloads/build/$b/$branch$slash_relative_path";
  $all_metadata["$b.index_url"] = $index_url;

  // Look in the index dir for the file size_kb that tells us the size of
  // this version (inside this directory).
  $file_contents = file("$index_dir/size_kb");
  if ($file_contents === false || count($file_contents) != 1
     || ! preg_match('/^\d+$/', $file_contents[0])) {
    syslog(LOG_ERR, "make_branch_index.php: error getting size of data from $index_dir/size_kb");
    exit(1);
  }
  $all_metadata["$b.size_kb"] = $file_contents[0];
  $size_human_readable = human_readable_size(1024 * $file_contents[0]);
  $all_metadata["$b.size_human_readable"] = $size_human_readable;

  if ($b == $max_b) {
    // As we process the most recent build number available, we'll put some data about
    // this build in the file <output-dir>/build_metadata
    $destdir = "$root/tree.temp/$branch$slash_relative_path";
    if ( ($file = fopen("$destdir/build_metadata", "w")) === false) {
      syslog(LOG_ERR, "make_branch_index.php: error opening file $destdir/build_metadata");
      exit(1);
    }
    $num_builds = count($input_dirs);
    $uploader_name = $all_metadata["$b.name"];
    fwrite($file, "num_builds=$num_builds\n");
    fwrite($file, "most_recent_build=$b\n");
    fwrite($file, "uploader_name=$uploader_name\n");
    fwrite($file, "size_human_readable=$size_human_readable\n");
    fwrite($file, "date=$date\n");
    if (! fclose($file)) {
      syslog(LOG_ERR, "make_branch_index.php: error closing file $destdir/build_metadata");      
      exit(1);
    }
  }
}

// Now figure out the URL $my_url by which we can refer to the index.html that we're
// creating in this script.
$my_url = "/downloads/tree/$branch$slash_relative_path";


// set $all_url, to something like /downloads/all/egs/wsj/s5; this will take the user
// to an index.html file that points to available branches for this location.
$all_url = "/downloads/all$slash_relative_path";


// get a list of subdirectories of this directory.
// $subdirs will be indexed by all strings $subdir, such that
// $input_dir/$subdir exists and is a directory for at least
// one member $input_dir of $input_dirs.
// We'll use this list to make links in our
// output html that go to subdirectories of $my_url.  
// note: the entries will appear as the key of $subdirs,
// not the value.  The entry will always be 1.
$subdirs = array();

foreach ($input_dirs as $input_dir) {
  $entries = scandir($input_dir); // returns array of entries.  
  foreach ($entries as $entry) {
    $path = "$input_dir/$entry";
    if (is_dir($path) && !is_link($path) && $entry != "." && $entry != "..") {
      $subdirs[$entry] = 1;
    }
  }
}

ksort($subdirs, SORT_STRING); // sort low to high on key [string]


?>

    
  </head>
  <body>
    <div class="container">
      <div id="centeredContainer">
        <div id="headerBar">
          <div id="headerLeft">  <image id="logoImage" src="/kaldi_text_and_logo.png"> </div>
          <div id="headerRight"> <image id="logoImage" src="/kaldi_logo.png">  </div>
        </div>
        <hr>
        <div id="topBar">
          <a class="topButtons" href="/index.html">Home</a>
          <a class="topButtons" href="/downloads/all">Downloads</a>
          <a class="myTopButton" href="/uploads.html">Uploading your builds</a>
        </div>
        <hr>

        <div id="mainContent">

        <h3>
         <?php print "Index of /$relative_path in branch $branch; <a href='$all_url'> [see all branches] </a>"; ?>
        </h3>


        <h3> Builds available for this directory: </h3>

       <table style="margin-top:0.2em">
        <tr>  <th>Build number</th>   <th>Uploader</th>  <th>Date</th>  <th>Kaldi revision</th>   <th>Size</th> <th>Note</th> </tr>
  <?php
       foreach ($input_dirs as $b => $input_dir) {
          $index_url = $all_metadata["$b.index_url"];
          $uploader_name = $all_metadata["$b.name"];
          $date = $all_metadata["$b.date"];
          $revision = $all_metadata["$b.revision"];
          $size = $all_metadata["$b.size_human_readable"];
          $note = $all_metadata["$b.note"];
 
          print "<tr> <td> <a href='$index_url'> $b </a> ";
          print "<td> $uploader_name </td> ";
          print "<td> $date </td> ";
          print "<td> r$revision </td> ";
          print "<td> $size </td> ";
          print "<td> $note </td> </tr>\n";
       }  
   ?>
    </table>    

     

      <h3> Subdirectories: </h3>
   <?php
      foreach ($subdirs as $subdir => $foo) {
         print "           <a href='$my_url/$subdir'> $subdir/ </a> <br>\n";
      }
      if ($relative_path != '') {
        print "           <p/>\n";
        print "           <a href='$my_url/..'> [parent directory] </a> <br>\n";
      }
   ?>

       </div>  <!-- main content.  -->
      </div> 
    </div>
  </body>      
</html>

